#
#===============================================================================
#
#         FILE:  IWL.pod
#
#  DESCRIPTION:  General description of IWL
#
#       AUTHOR:   (Viktor Kojouharov), <viktor@imperia.net>
#      COMPANY:   Imperia AG 
#      CREATED:   6.07.2006 18,15,11 EEST
#     REVISION:  ---
#===============================================================================


=head1 NAME

IWL - A widget library for web pages

=head1 VERSION

This documentation refers to <IWL> version 0.4.5

=head1 SYNOPSIS

	use IWL;
	# Brief but working code example(s) here showing the most 
	# common usage(s)
	
        # create the main container, and a few widgets
	my $page = IWL::Page->new;
	my $frame = IWL::Frame->new;
	my $iconbox = IWL::Iconbox->new
	    (width => '800px', height => '600px');
	my $button = IWL::Imperia::Button->new_from_stock
	    ('IWL_STOCK_CANCEL');
	my %some_icon_info = {"foo.jpg" => 'foo', "bar.png" => 'bar');

        # Setting up the icons and adding them to the iconbox
	foreach (keys %some_icon_info) {
	    my $icon = IWL::Iconbox::Icon->new;
	    $icon->setImage($_);
	    $icon->setText($some_icon_info{$_});
	    $icon->setDimensions('64px', '64px');
	    $icon->setSelected if $_ == 'something';
	    $iconbox->appendIcon($icon);
	}

	$page->appendMetaEquiv("Cache-control" => "no-cache");
	$frame->setLabel("Frame label");
        # Adding the children to their parents
	$frame->appendChild($iconbox);
	$frame->appendChild($button);
	$page->appendChild($frame);

        # Finally printing the page
	$page->print;



=head1 DESCRIPTION

The IWL includes several widgets with which consistent web pages can be built quickly. The structure resembles the DOM tree, with the API mimicking Javascript very closely. It also tries to resemble the GTK+2 API in terms of method names as much as possible.
The widgets themselves can be used either as standalone object in an already existing scripts, or can be used to build new scripts from the grounds up. They can be finalized in both HTML markup, and JSON notation, which can be used for scripts. More advanced widgets like the Iconbox come with Javascript files which are automatically included when the widget is finalized as HTML.


=head1 INCLUDED MODULES

The following widgets have so far been written. They have extensive documentation for their methods

 IWL::Anchor - An anchor widget ("<a>")
 IWL::Button - A regular button widget ("<button>")
 IWL::CheckButton - A checkbutton widget (checkbox + text)
 IWL::Combo - A combobox widget ("<select>")
 IWL::Combo::Option - The content of a combobox ("<option>")
 IWL::Container - A basic container widget ("<div>")
 IWL::Entry - An entry widget ("<input type="text">")
 IWL::File - A file upload widget ("<input type="file">")
 IWL::Form - A form widget ("<form>")
 IWL::Frame - A frame widget ("<fieldset>")
 IWL::Hidden - A hidden input object ("<input type="hidden">")
 IWL::Iconbox - An iconbox widget (holds icons and has keyboard navigation)
 IWL::Iconbox::Icon - An icon widget for the iconbox
 IWL::Iconbox::Container - A generic container for the iconbox
 IWL::Image - An image widget ("<img>")
 IWL::Input - A generic input widget ("<input>")
 IWL::Label - A label widget 
 IWL::Page - A page widget, for creating new pages
 IWL::Page::Meta - A meta object for the page widget ("<meta>")
 IWL::Page::Link - A link object for the page widget ("<link>")
 IWL::RadioButton - A radiobutton widget (radiobutton + text)
 IWL::Script - A script object ("<script>")
 IWL::Stock - A stock object, for buttons and images
 IWL::Style - A style object ("<style>")
 IWL::SubmitImage - An input image widget ("<input type="image">")
 IWL::Table - A table widget ("<table>")
 IWL::Table::Row - A row widget for the table ("<tr">)
 IWL::Table::Cell - A cell widget for the table row ("<td>", "<th>")
 IWL::Text - A simple text container
 IWL::Textarea - A textarea widget ("<textarea>")
 IWL::Tree - A tree widget (has keyboard navigation)
 IWL::Tree::Row - A tree row widget
 IWL::Tree::Cell - A tree cell widget
                          
 IWL::Imperia::Button - A button widget, with graphic background support


=head1 CONFIGURATION AND ENVIRONMENT

Configuration is done by editing the I<iwl.conf> file. It can be placed in the directory of the scripts that use IWL, or it's full path and name can be fiven in the I<IWL_CONFIG_FILE> environment variable. A default configuration is provided inside IWL::Config.


=head1 DEPENDENCIES

  JSON
  Scalar::Util
  Locale::Messages
  Locale::TextDomain
  HTML::Parser

=head1 TODO

=head2 General

 - Write more testcases
 - Write an installer

=head2 Perl

 - Use only one type of image for the button background (png or gif)
 - Add more stock items to IWL::Stock

=head2 Graphics

 - Create prettier icons, because the current ones look like ... rust


=head1 BUGS AND LIMITATIONS

 - In Internet explorer, floats will escape a container with scrollbars,
   if the positioning on the container is static, or the floats have a 
   relative positioning
 - The JSON library used in IWL has a bug where it will incorrectly unescape
   double quotes. It is preferred to escape potentially dangerous strings
   beforehand, or not use JSON at all

=head1 AUTHOR

  Viktor Kojouharov


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2006  (). All rights reserved.

Followed by whatever licence you wish to release it under.
For Perl code that is often just:

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perldoc perlartistic.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut



